def precedencia(op):
    if op == 'not':
        return 3
    if op == 'and':
        return 2
    if op == 'or':
        return 1
    return 0

def aplica_operador(op, val1, val2=None):
    if op == 'not':
        return not val1
    elif op == 'and':
        return val1 and val2
    elif op == 'or':
        return val1 or val2

def avaliar(expressao):
    operadores = []
    operandos = []

    tokens = expressao.replace('(', ' ( ').replace(')', ' ) ').split()

    for token in tokens:
        if token in ['True', 'False']:
            operandos.append(token == 'True')
        elif token == '(':
            operadores.append(token)
        elif token == ')':
            while operadores and operadores[-1] != '(':
                op = operadores.pop()
                if op == 'not':
                    val = operandos.pop()
                    operandos.append(aplica_operador(op, val))
                else:
                    val2 = operandos.pop()
                    val1 = operandos.pop()
                    operandos.append(aplica_operador(op, val1, val2))
            operadores.pop()  # Remove o '('
        elif token in ['and', 'or', 'not']:
            while (operadores and operadores[-1] != '(' and
                   precedencia(operadores[-1]) >= precedencia(token)):
                op = operadores.pop()
                if op == 'not':
                    val = operandos.pop()
                    operandos.append(aplica_operador(op, val))
                else:
                    val2 = operandos.pop()
                    val1 = operandos.pop()
                    operandos.append(aplica_operador(op, val1, val2))
            operadores.append(token)

    while operadores:
        op = operadores.pop()
        if op == 'not':
            val = operandos.pop()
            operandos.append(aplica_operador(op, val))
        else:
            val2 = operandos.pop()
            val1 = operandos.pop()
            operandos.append(aplica_operador(op, val1, val2))

    return operandos[0]
